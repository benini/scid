
trigger:
- github

jobs:
- job: windows_tests
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: |
      git config --global core.autocrlf false
    displayName: git config
  - checkout: self
    fetchDepth: 1
  - script: |
      pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
      for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
      popd
      call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
      mkdir tcltk & cd tcltk
      git clone --depth=1 --branch core-8-6-branch https://github.com/tcltk/tcl.git
      cd tcl & cd win
      nmake -f makefile.vc INSTALLDIR=$(Build.SourcesDirectory)\tcldir
      nmake -f makefile.vc install INSTALLDIR=$(Build.SourcesDirectory)\tcldir
    displayName: Generate tcl library
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-DTCL_INCLUDE_PATH=$(Build.SourcesDirectory)\tcldir\include $(Build.SourcesDirectory) -DGTEST=ON'
  - task: MSBuild@1
    inputs:
      solution: 'build/ALL_BUILD.vcxproj'
      maximumCpuCount: true
      platform: 'x64'
      configuration: 'Debug'
    displayName: Generate SCID
  - script: build\gtest\Debug\scid_tests.exe
    displayName: run scid_tests.exe

- job: windows_latest
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: |
      pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
      for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
      popd
      call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
      mkdir tcltk & cd tcltk
      git clone --depth=1 --branch core-8-6-branch https://github.com/tcltk/tcl.git
      cd tcl & cd win
      nmake -f makefile.vc INSTALLDIR=$(Build.SourcesDirectory)\tcldir
      nmake -f makefile.vc install INSTALLDIR=$(Build.SourcesDirectory)\tcldir
    displayName: Generate tcl library
  - script: |
      pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
      for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
      popd
      call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
      cd tcltk
      git clone --depth=1 --branch core-8-6-branch https://github.com/tcltk/tk.git
      cd tk & cd win
      nmake -f makefile.vc INSTALLDIR=$(Build.SourcesDirectory)\tcldir
      nmake -f makefile.vc install INSTALLDIR=$(Build.SourcesDirectory)\tcldir
    displayName: Generate tk library
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)/install -DTCL_INCLUDE_PATH=$(Build.SourcesDirectory)\tcldir\include $(Build.SourcesDirectory) -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DWITH_MD_LIBRARY=OFF'
  - task: MSBuild@1
    inputs:
      solution: 'build/INSTALL.vcxproj'
      maximumCpuCount: true
      platform: 'x64'
      configuration: 'Release'
      msbuildArguments: "/p:SpectreMitigation=false /p:RuntimeTypeInfo=false /p:EnableCOMDATFolding=true /p:LinkTimeCodeGeneration=UseLinkTimeCodeGeneration"
    displayName: Generate SCID
  - script: |
      pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
      for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
      popd
      call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
      git clone --depth=1 https://github.com/official-stockfish/Stockfish.git stockfish
      cd stockfish\src
      cl /std:c++20 /DNDEBUG /DUSE_POPCNT /DUSE_AVX2 /DUSE_SSE41 /DUSE_SSSE3 /DUSE_SSE2  /GS- /MT /O2 /Oi /Ot /Oy /GL /EHsc *.cpp nnue/*.cpp nnue/features/*.cpp syzygy/*.cpp /link /LTCG /STACK:reserve=8388608 /OUT:stockfish.exe advapi32.lib
      copy stockfish.exe $(Build.SourcesDirectory)\install\bin
    displayName: Generate stockfish
  - bash: |
      nnue=$(egrep -o "nn-[a-z0-9]+.nnue" stockfish/src/evaluate.h)
      echo "https://data.stockfishchess.org/nn/$nnue ==> install/bin/$nnue"
      curl -o install/bin/$nnue https://data.stockfishchess.org/nn/$nnue
    displayName: Download stockfish nnue
  - script: |
      move bin engines
      move scid bin
      copy $(Build.SourcesDirectory)\tcldir\bin\*.dll bin
      xcopy /e $(Build.SourcesDirectory)\tcldir\lib\tcl8 lib\tcl8\
      xcopy /e $(Build.SourcesDirectory)\tcldir\lib\tcl8.6 lib\tcl8.6\
      xcopy /e $(Build.SourcesDirectory)\tcldir\lib\tk8.6 lib\tk8.6\
    workingDirectory: '$(Build.SourcesDirectory)\install'
    displayName: Add the tcl/tk library to the package
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\install'
      TargetFolder: '$(build.artifactstagingdirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: windows x64'
    inputs:
      artifactName: scid_windows_x64
      PathtoPublish: '$(build.artifactstagingdirectory)'

- job: ubuntu_latest
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      sudo apt-get update &&
      sudo apt-get -y install tcl-dev clang clang-tidy clang-format cloc
    displayName: download tclk
  - script: |
      cloc src --exclude-dir=egtb,mtbgen,polyglot
      cloc tcl --exclude-dir=lang
    displayName: count line of code
  - script: |
      clang-format -version
      clang-format -i src/codec*
      clang-format -i src/movegen*
      clang-format -i src/pgn*
      clang-format -i src/bytebuf.h
      clang-format -i src/gameview.h
      clang-format -i src/namebase.h
      if [[ -n $(git diff) ]]; then
        git diff
        exit -1
      fi
    displayName: clang-format
  - script: |
      mkdir build_tidy && cd build_tidy
      cmake -DCMAKE_CXX_FLAGS="-g -Wall -Wextra -Werror -pedantic" -DSPELLCHKVALIDATE=ON \
             $(Build.SourcesDirectory)
      make VERBOSE=1
      run-clang-tidy -header-filter=.* -checks=performance-*,clang-*,-clang-analyzer-security.insecureAPI.strcpy ../src 2> /dev/null
    displayName: clang-tidy
  - script: |
      mkdir build && cd build
      cmake -DCPACK_GENERATOR=DEB \
            -DCPACK_DEBIAN_PACKAGE_MAINTAINER="Fulvio Benini" \
            -DCPACK_DEBIAN_PACKAGE_DEPENDS=tk \
            -DCPACK_DEBIAN_PACKAGE_LICENSE=GPL2 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-fno-exceptions -fno-rtti" \
            -DCMAKE_EXE_LINKER_FLAGS="-static-libstdc++ -static-libgcc" \
             $(Build.SourcesDirectory)
      make package
    displayName: Generate SCID
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/build'
      Contents: '*.deb'
      TargetFolder: '$(build.artifactstagingdirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian x64'
    inputs:
      artifactName: scid_ubuntu_latest_x64_deb_package
      PathtoPublish: '$(build.artifactstagingdirectory)'

- job: linux_static
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      mkdir tcltk && cd tcltk
      git clone --depth=1 --branch core-8-6-branch https://github.com/tcltk/tcl.git
      cd tcl && cd unix
      ./configure --prefix=$(Build.SourcesDirectory)/tcltk --disable-shared --enable-threads
      make && make install
    displayName: Generate tcl library
  - script: |
      cd tcltk
      git clone --depth=1 --branch core-8-6-branch https://github.com/tcltk/tk.git
      cd tk && cd unix
      ./configure --prefix=$(Build.SourcesDirectory)/tcltk --enable-threads
      make && make install
    displayName: Generate tk library
  - script: |
      mkdir build && cd build
      cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-fno-exceptions -fno-rtti" \
            -DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)/scid_linux \
            -DTCL_INCLUDE_PATH=$(Build.SourcesDirectory)/tcltk/include \
            -DTCL_LIBRARY=$(Build.SourcesDirectory)/tcltk/lib/libtcl8.6.a \
            -DCMAKE_CXX_STANDARD_LIBRARIES="-lz -ldl" \
             $(Build.SourcesDirectory)
      make VERBOSE=1
      make install
    displayName: Generate SCID
  - script: |
      cd scid_linux
      mv bin engines
      mkdir lib
      cp $(Build.SourcesDirectory)/tcltk/lib/*.so lib/
      cp -R $(Build.SourcesDirectory)/tcltk/lib/tcl8 lib/
      cp -R $(Build.SourcesDirectory)/tcltk/lib/tcl8.6 lib/
      cp -R $(Build.SourcesDirectory)/tcltk/lib/tk8.6 lib/
      cd ..
      tar -zcvf '$(build.artifactstagingdirectory)/scid_linux.tar.gz' --owner=0 --group=0 scid_linux
    displayName: Add the tcl/tk library to the package
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: linux static x64'
    inputs:
      artifactName: scid_linux_x64_static_tcl
      PathtoPublish: '$(build.artifactstagingdirectory)'

- job: macOS_static
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      mkdir tcltk && cd tcltk
      git clone --depth=1 --branch core-8-6-branch https://github.com/tcltk/tcl.git
      cd tcl && cd unix
      ./configure --prefix=$(Build.SourcesDirectory)/tcltk --disable-shared --enable-threads
      make && make install
    displayName: Generate tcl library
  - script: |
      cd tcltk
      git clone --depth=1 --branch core-8-6-branch https://github.com/tcltk/tk.git
      cd tk && cd unix
      ./configure --prefix=$(Build.SourcesDirectory)/tcltk --enable-threads --enable-aqua
      make && make install
    displayName: Generate tk library
  - script: |
      mkdir build && cd build
      export LDFLAGS="-lz -framework CoreFoundation"
      cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-fno-exceptions -fno-rtti" \
            -DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)/scid_macos \
            -DTCL_INCLUDE_PATH=$(Build.SourcesDirectory)/tcltk/include \
            -DTCL_LIBRARY=$(Build.SourcesDirectory)/tcltk/lib/libtcl8.6.a \
             $(Build.SourcesDirectory)
      make VERBOSE=1
      make install
    displayName: Generate SCID
  - script: |
      cd scid_macos
      mv bin engines
      mkdir lib
      cp $(Build.SourcesDirectory)/tcltk/lib/*.dylib lib/
      cp -R $(Build.SourcesDirectory)/tcltk/lib/tcl8 lib/
      cp -R $(Build.SourcesDirectory)/tcltk/lib/tcl8.6 lib/
      cp -R $(Build.SourcesDirectory)/tcltk/lib/tk8.6 lib/
      cd ..
      tar -zcvf '$(build.artifactstagingdirectory)/scid_macOS.tar.gz' scid_macos
    displayName: Add the tcl/tk library to the package
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: macOS static x64'
    inputs:
      artifactName: scid_macOS_latest_64_static_tcl
      PathtoPublish: '$(build.artifactstagingdirectory)'

- job: macOS_catalina_static
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - script: |
      mkdir tcltk && cd tcltk
      git clone --depth=1 --branch core-8-6-branch https://github.com/tcltk/tcl.git
      cd tcl && cd unix
      ./configure --prefix=$(Build.SourcesDirectory)/tcltk --disable-shared --enable-threads
      make && make install
    displayName: Generate tcl library
  - script: |
      cd tcltk
      git clone --depth=1 --branch core-8-6-branch https://github.com/tcltk/tk.git
      cd tk && cd unix
      ./configure --prefix=$(Build.SourcesDirectory)/tcltk --enable-threads --enable-aqua
      make && make install
    displayName: Generate tk library
  - script: |
      mkdir build && cd build
      export LDFLAGS="-lz -framework CoreFoundation"
      cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-fno-exceptions -fno-rtti" \
            -DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)/scid_macos \
            -DTCL_INCLUDE_PATH=$(Build.SourcesDirectory)/tcltk/include \
            -DTCL_LIBRARY=$(Build.SourcesDirectory)/tcltk/lib/libtcl8.6.a \
             $(Build.SourcesDirectory)
      make VERBOSE=1
      make install
    displayName: Generate SCID
  - script: |
      cd scid_macos
      mv bin engines
      mkdir lib
      cp $(Build.SourcesDirectory)/tcltk/lib/*.dylib lib/
      cp -R $(Build.SourcesDirectory)/tcltk/lib/tcl8 lib/
      cp -R $(Build.SourcesDirectory)/tcltk/lib/tcl8.6 lib/
      cp -R $(Build.SourcesDirectory)/tcltk/lib/tk8.6 lib/
      cd ..
      tar -zcvf '$(build.artifactstagingdirectory)/scid_macOS-10.15.tar.gz' scid_macos
    displayName: Add the tcl/tk library to the package
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: macOS-10.15 static x64'
    inputs:
      artifactName: scid_macOS_10_15_x64_static_tcl
      PathtoPublish: '$(build.artifactstagingdirectory)'
